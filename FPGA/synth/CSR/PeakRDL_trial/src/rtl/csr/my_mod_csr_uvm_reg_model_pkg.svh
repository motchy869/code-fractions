`ifndef MY_MOD_CSR_UVM_REG_MODEL_PKG_SVH_INCLUDED
`define MY_MOD_CSR_UVM_REG_MODEL_PKG_SVH_INCLUDED

// Verible directive
// verilog_lint: waive-start line-length

// This file was autogenerated by PeakRDL-uvm
package my_mod_csr_uvm_reg_model_pkg;
    `include "uvm_macros.svh"
    import uvm_pkg::*;

    // Reg - my_mod_csr.MY_MOD_VERSION
    class my_mod_csr__MY_MOD_VERSION extends uvm_reg;
        `uvm_object_utils(my_mod_csr__MY_MOD_VERSION)
        rand uvm_reg_field DEBUG;
        rand uvm_reg_field PATCH;
        rand uvm_reg_field MINOR;
        rand uvm_reg_field MAJOR;

        function new(string name = "my_mod_csr__MY_MOD_VERSION");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.DEBUG = uvm_reg_field::type_id::create("DEBUG");
            this.DEBUG.configure(this, 12, 0, "RO", 0, 'h567, 1, 1, 0);
            this.PATCH = uvm_reg_field::type_id::create("PATCH");
            this.PATCH.configure(this, 8, 12, "RO", 0, 'h34, 1, 1, 0);
            this.MINOR = uvm_reg_field::type_id::create("MINOR");
            this.MINOR.configure(this, 8, 20, "RO", 0, 'h12, 1, 1, 0);
            this.MAJOR = uvm_reg_field::type_id::create("MAJOR");
            this.MAJOR.configure(this, 4, 28, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : my_mod_csr__MY_MOD_VERSION

    // Reg - my_mod_csr.PROTECTED_REG
    class my_mod_csr__PROTECTED_REG extends uvm_reg;
        `uvm_object_utils(my_mod_csr__PROTECTED_REG)
        rand uvm_reg_field FIELD;

        function new(string name = "my_mod_csr__PROTECTED_REG");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.FIELD = uvm_reg_field::type_id::create("FIELD");
            this.FIELD.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : my_mod_csr__PROTECTED_REG

    // Reg - my_mod_csr.UNLOCK_PROTECTED_REG
    class my_mod_csr__UNLOCK_PROTECTED_REG extends uvm_reg;
        `uvm_object_utils(my_mod_csr__UNLOCK_PROTECTED_REG)
        rand uvm_reg_field UNLOCK;

        function new(string name = "my_mod_csr__UNLOCK_PROTECTED_REG");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.UNLOCK = uvm_reg_field::type_id::create("UNLOCK");
            this.UNLOCK.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : my_mod_csr__UNLOCK_PROTECTED_REG

    // Reg - my_mod_csr.SINGLE_PULSE
    class my_mod_csr__SINGLE_PULSE extends uvm_reg;
        `uvm_object_utils(my_mod_csr__SINGLE_PULSE)
        rand uvm_reg_field FIELD;

        function new(string name = "my_mod_csr__SINGLE_PULSE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.FIELD = uvm_reg_field::type_id::create("FIELD");
            this.FIELD.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : my_mod_csr__SINGLE_PULSE

    // Reg - my_mod_csr.WRITE_ONCE
    class my_mod_csr__WRITE_ONCE extends uvm_reg;
        `uvm_object_utils(my_mod_csr__WRITE_ONCE)
        rand uvm_reg_field FIELD;

        function new(string name = "my_mod_csr__WRITE_ONCE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.FIELD = uvm_reg_field::type_id::create("FIELD");
            this.FIELD.configure(this, 32, 0, "W1", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : my_mod_csr__WRITE_ONCE

    // Mem - my_mod_csr.SIMPLE_MEM
    class my_mod_csr__SIMPLE_MEM extends uvm_reg_block;
        `uvm_object_utils(my_mod_csr__SIMPLE_MEM)
        rand uvm_mem m_mem;

        function new(string name = "my_mod_csr__SIMPLE_MEM");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 8, 32, "RW");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
        endfunction : build
    endclass : my_mod_csr__SIMPLE_MEM

    // Addrmap - my_mod_csr
    class my_mod_csr extends uvm_reg_block;
        `uvm_object_utils(my_mod_csr)
        rand my_mod_csr__MY_MOD_VERSION MY_MOD_VERSION;
        rand my_mod_csr__PROTECTED_REG PROTECTED_REG;
        rand my_mod_csr__UNLOCK_PROTECTED_REG UNLOCK_PROTECTED_REG;
        rand my_mod_csr__SINGLE_PULSE SINGLE_PULSE;
        rand my_mod_csr__WRITE_ONCE WRITE_ONCE;
        rand my_mod_csr__SIMPLE_MEM SIMPLE_MEM;

        function new(string name = "my_mod_csr");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.MY_MOD_VERSION = my_mod_csr__MY_MOD_VERSION::type_id::create("MY_MOD_VERSION");
            this.MY_MOD_VERSION.configure(this);

            this.MY_MOD_VERSION.build();
            this.default_map.add_reg(this.MY_MOD_VERSION, 'h0);
            this.PROTECTED_REG = my_mod_csr__PROTECTED_REG::type_id::create("PROTECTED_REG");
            this.PROTECTED_REG.configure(this);

            this.PROTECTED_REG.build();
            this.default_map.add_reg(this.PROTECTED_REG, 'h4);
            this.UNLOCK_PROTECTED_REG = my_mod_csr__UNLOCK_PROTECTED_REG::type_id::create("UNLOCK_PROTECTED_REG");
            this.UNLOCK_PROTECTED_REG.configure(this);

            this.UNLOCK_PROTECTED_REG.build();
            this.default_map.add_reg(this.UNLOCK_PROTECTED_REG, 'h8);
            this.SINGLE_PULSE = my_mod_csr__SINGLE_PULSE::type_id::create("SINGLE_PULSE");
            this.SINGLE_PULSE.configure(this);

            this.SINGLE_PULSE.build();
            this.default_map.add_reg(this.SINGLE_PULSE, 'hc);
            this.WRITE_ONCE = my_mod_csr__WRITE_ONCE::type_id::create("WRITE_ONCE");
            this.WRITE_ONCE.configure(this);

            this.WRITE_ONCE.build();
            this.default_map.add_reg(this.WRITE_ONCE, 'h10);
            this.SIMPLE_MEM = my_mod_csr__SIMPLE_MEM::type_id::create("SIMPLE_MEM");
            this.SIMPLE_MEM.configure(this);
            this.SIMPLE_MEM.build();
            this.default_map.add_submap(this.SIMPLE_MEM.default_map, 'h20);
        endfunction : build
    endclass : my_mod_csr

endpackage: my_mod_csr_uvm_reg_model_pkg

`endif
