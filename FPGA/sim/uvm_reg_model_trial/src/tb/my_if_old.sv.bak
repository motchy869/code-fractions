// Verible directive
// verilog_lint: waive-start line-length

`ifndef MY_VERIF_PKG_SVH_INCLUDED
    $fatal("compile \"my_verif_pkg.sv\" instead of including this file");
`endif

`include "../axi4_lite_if.svh"

`default_nettype none

//! An interface to DUT.
    //! This is focused on the real-time signals.
interface my_rt_sig_if (
    input wire logic clk //! clock
);
    logic sync_rst;
    axi4_lite_if #(
        .ADDR_BIT_WIDTH(my_verif_params_pkg::AXI4_LITE_ADDR_BIT_WIDTH),
        .DATA_BIT_WIDTH(my_verif_params_pkg::AXI4_LITE_DATA_BIT_WIDTH)
    ) axi4_lite_if_0(.clk(clk));
    logic [3:0] sel_reg_to_sum;
    logic reg_0_or_reduc;
    logic reg_1_and_reduc;
    logic reg_2_xor_reduc;
    logic [$clog2(my_verif_params_pkg::AXI4_LITE_DATA_BIT_WIDTH):0] reg_3_bit_cnt;
    logic [my_verif_params_pkg::AXI4_LITE_DATA_BIT_WIDTH-1:0] sum_sel_reg;

    modport rt_sig_drv(
        input sync_rst,
        input sel_reg_to_sum
    );

    modport col_port(
        input sync_rst,
        input sel_reg_to_sum,
        input reg_0_or_reduc,
        input reg_1_and_reduc,
        input reg_2_xor_reduc,
        input reg_3_bit_cnt,
        input sum_sel_reg
    );

    clocking bus_drv_cb @(posedge clk); // clocking block for bus driver
        default input #1 output #1;
        input sync_rst;
        // [SystemVerilog Clocking Blocks in Bi-Directional Interface](https://stackoverflow.com/questions/35185878/systemverilog-clocking-blocks-in-bi-directional-interface)
        inout axi4_lite_if_0;

        input sel_reg_to_sum;
        input reg_0_or_reduc;
        input reg_1_and_reduc;
        input reg_2_xor_reduc;
        input reg_3_bit_cnt;
        input sum_sel_reg;
    endclocking

    clocking col_cb @(posedge clk); // clocking block for collector
        default input #1 output #1;
        input sync_rst;
        input axi4_lite_if_0;
        input sel_reg_to_sum;
        input reg_0_or_reduc;
        input reg_1_and_reduc;
        input reg_2_xor_reduc;
        input reg_3_bit_cnt;
        input sum_sel_reg;
    endclocking
endinterface

`default_nettype wire
