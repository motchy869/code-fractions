#!/usr/bin/env python3

import argparse
import re

def refactor_core_file(file_path: str):
    # Load the file and refactor it.
    with open(file_path, 'r') as file:
        lines = file.readlines()
        # Replace '_axil' with '_axi4lite'
        lines = [line.replace('_axil', '_axi4lite') for line in lines]
        # Replace 'axil_' with 'axi4lite_'
        lines = [line.replace('axil_', 'axi4lite_') for line in lines]
        # Replace 'hwif_out' with 'hw_if_out'
        lines = [line.replace('hwif_out', 'hw_if_out') for line in lines]
        # Replace 'hwif_in' with 'hw_if_in'
        lines = [line.replace('hwif_in', 'hw_if_in') for line in lines]
        # Insert Verible directives
        inserted_str = '''// Verible directive
// verilog_lint: waive-start line-length
// verilog_lint: waive-start typedef-structs-unions

'''
        lines.insert(0, inserted_str)

    # Save the refactored file.
    with open(file_path, 'w') as file:
        file.writelines(lines)

def refactor_pkg_file(file_path: str):
    # Load the file and refactor it.
    with open(file_path, 'r') as file:
        lines = file.readlines()

        # Replace 'localparam' with 'localparam int'
        pattern = r'(localparam) ([a-zA-Z\d_]+_WIDTH)'
        compiled_pattern = re.compile(pattern)
        for i in range(len(lines)):
            lines[i] = re.sub(compiled_pattern, r'\1 int \2', lines[i])

        # Insert Verible directives
        inserted_str = '''// Verible directive
// verilog_lint: waive-start line-length
// verilog_lint: waive-start parameter-name-style
// verilog_lint: waive-start struct-union-name-style

'''
        lines.insert(0, inserted_str)

    # Save the refactored file.
    with open(file_path, 'w') as file:
        file.writelines(lines)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Refactor SystemVerilog code generated by PeakRDL v1.1.0')
    parser.add_argument('file_path', type=str, help='target core file (not pkg) path')
    args = parser.parse_args()
    refactor_core_file(args.file_path)
    pkg_file_path = args.file_path.replace('.sv', '_pkg.sv')
    refactor_pkg_file(pkg_file_path)
