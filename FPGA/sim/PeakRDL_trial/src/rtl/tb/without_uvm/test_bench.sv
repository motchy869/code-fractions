// Verible directive
// verilog_lint: waive-start parameter-name-style
// verilog_lint: waive-start line-length

`include "../../my_mod.svh"

`default_nettype none

// timescale is defined in Makefile.

//! A test bench for CSR generated by PeakRDL.
module test_bench;
// ---------- parameters ----------
localparam int CLK_PERIOD_NS = 8; //! clock period in ns
localparam int SIM_TIME_LIMIT_NS = 300; //! simulation time limit in ns
//! Reset signal deasserts right after this clock rising-edge.
//!
//! 'Holding AXI ARESETN asserted for 16 cycles of the slowest AXI clock is generally a sufficient reset pulse width for Xilinx IP. --UG1037.' (AXI VIP message)
localparam int RELEASE_RST_AFTER_CLK = 20;

localparam int AXI4_LITE_ADDR_BIT_WIDTH = $clog2('h40); //! bit width of AXI4-Lite address bus
localparam int AXI4_LITE_DATA_BIT_WIDTH = 32; //! bit width of AXI4-Lite data bus
// --------------------

// ---------- internal signal and storage ----------
var bit r_clk; //! clock signal
var bit r_sync_rst; //! clock synchronous reset signal

virtual interface axi4_lite_if #(
    .ADDR_BIT_WIDTH(AXI4_LITE_ADDR_BIT_WIDTH),
    .DATA_BIT_WIDTH(AXI4_LITE_DATA_BIT_WIDTH)
) axi4_lite_vif_0; //! AXI4-Lite virtual interface between test bench and DUT
// --------------------

// ---------- instances ----------
//! AXI4-Lite interface for DUT.
axi4_lite_if #(
    .ADDR_BIT_WIDTH(AXI4_LITE_ADDR_BIT_WIDTH),
    .DATA_BIT_WIDTH(AXI4_LITE_DATA_BIT_WIDTH)
) axi4_lite_if_0 (
    .clk(r_clk)
);

my_mod my_mod_0 (
    .i_clk(r_clk),
    .i_sync_rst(r_sync_rst),
    .if_s_axi4_lite(axi4_lite_if_0.slv_port)
);
// --------------------

//! Drive the clock.
initial forever #(CLK_PERIOD_NS/2) r_clk = ~r_clk;

//! Drive the reset signal.
task automatic drive_rst();
    r_sync_rst <= 1'b1;
    repeat (RELEASE_RST_AFTER_CLK) begin
        @(posedge r_clk);
    end
    r_sync_rst <= 1'b0;
endtask

task automatic scenario();
    drive_rst();
    @(posedge r_clk);
    $finish;
endtask

//! Launch scenario and manage time limit.
initial begin
    axi4_lite_vif_0 = axi4_lite_if_0;
    fork
        scenario();
    join_none
    #SIM_TIME_LIMIT_NS;
    $fatal(2, "Simulation timeout.");
end

endmodule

`default_nettype wire
